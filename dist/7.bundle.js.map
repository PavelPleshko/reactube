{"version":3,"file":"7.bundle.js","sources":["webpack:///./src/pages/SingleMedia.js"],"sourcesContent":["import React, {Component} from 'react';\r\n\r\n//material ui\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport { push } from 'connected-react-router'\r\n\r\nimport * as mediaOperations from '../store/states/media/media.operations';\r\nimport {selectSingleMedia,selectMedias} from '../store/states/media/media.selectors';\r\nimport {selectUser} from '../store/states/user/user.selectors';\r\n\r\nimport MediaPlayer from './singleMedia/MediaPlayer';\r\nimport MediaList from './singleMedia/MediaList';\r\nimport Autoplay from './singleMedia/Autoplay';\r\nimport CommentList from './singleMedia/CommentList';\r\n\r\n\r\nconst styles = theme =>({\r\n\troot:{\r\n\t\tpadding:'0 10%',\r\n\t\tposition:'relative'\r\n\t}\r\n\r\n\r\n});\r\n\r\nclass SingleMedia extends Component{\r\n\t\r\n\tstate = {\r\n\t\tautoplay:false,\r\n\t}\r\n\tloadMedia = (mediaId)=>{\r\n\t\tthis.props.readMedia(mediaId);\r\n\t\tthis.props.listRelatedMedia(mediaId);\r\n\t}\r\n\r\n\tcomponentDidMount = () =>{\r\n\t\tconst {mediaId} = this.props.match.params;\r\n\t\tthis.loadMedia(mediaId);\t\r\n\t}\r\n\r\n\tcomponentDidUpdate=(prevProps)=>{\r\n\t\tlet {mediaId} = this.props.match.params;\r\n\t\tlet isParamChanged = mediaId !== prevProps.match.params.mediaId;\r\n\t\tif( isParamChanged){\r\n\t\t\tthis.loadMedia(mediaId);\r\n\t\t}\r\n\t}\r\n\r\n\thandleAutoplay = (updateMediaControls) =>{\r\n\t\tlet {autoplay} = this.state;\r\n\t\tlet playlist = this.props.relatedMedia;\r\n\t\tlet media = playlist[0];\r\n\t\tif(!autoplay || playlist.length == 0)\r\n\t\treturn updateMediaControls();\r\n\r\n\tif(playlist.length > 1){\r\n\t\tlet nextUrl = `/media/${media._id}`;\r\n\t\tconsole.log(this.props);\r\n\t\tthis.props.pushHistory(nextUrl);\r\n\t}else{\r\n\t\tthis.props.listRelatedMedia(media._id);\r\n\t}\r\n\t}\r\n\r\n\tautoPlayChangeHandler = (e) =>{\r\n\t\tthis.setState({autoplay:e.target.checked})\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst {classes,media,relatedMedia,user} = this.props;\r\n\t\tconst nextUrl = relatedMedia.length > 0\r\n          ? `/media/${relatedMedia[0]._id}` : ''\r\n\treturn (\r\n\t\t<Grid className={classes.root} container spacing={24}>\r\n\t\t\t<Grid item sm={7} xs={12}>\r\n\t\t\t\t<MediaPlayer media={media} user={user} nextUrl={nextUrl} handleAutoplay={this.handleAutoplay} /> \r\n\t\t\t\t{media && <CommentList mediaId={media._id}/>}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item sm={5} xs={12}>\r\n\t\t\t\t<MediaList data={relatedMedia} title=\"Up next\">\r\n\t\t\t\t\t<Autoplay autoPlay={this.state.autoplay} autoplayChange={this.autoPlayChangeHandler}/>\r\n\t\t\t\t</MediaList>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n\t}\r\n}\r\n\r\nconst mappedStateToProps = (state) =>(\r\n{\r\n  media:selectSingleMedia(state.media.medias),\r\n  relatedMedia:selectMedias(state.media.medias,'related'),\r\n  user:selectUser(state.user)\r\n}\r\n  );\r\n\r\n\r\nconst boundActionCreators = (dispatch) => bindActionCreators({...mediaOperations,pushHistory:push},dispatch);\r\n\r\nexport default connect(mappedStateToProps,boundActionCreators)(withStyles(styles)(SingleMedia));"],"mappings":"AAAA","sourceRoot":""}